/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.vkc.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3313276069307535986L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogRecord\",\"namespace\":\"com.vkc.avro\",\"fields\":[{\"name\":\"ip\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"long\"},{\"name\":\"url\",\"type\":\"string\"},{\"name\":\"referrer\",\"type\":\"string\"},{\"name\":\"useragent\",\"type\":\"string\"},{\"name\":\"sessionid\",\"type\":[\"null\",\"int\"],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogRecord> ENCODER =
      new BinaryMessageEncoder<LogRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogRecord> DECODER =
      new BinaryMessageDecoder<LogRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogRecord from a ByteBuffer. */
  public static LogRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence ip;
  @Deprecated public long timestamp;
  @Deprecated public java.lang.CharSequence url;
  @Deprecated public java.lang.CharSequence referrer;
  @Deprecated public java.lang.CharSequence useragent;
  @Deprecated public java.lang.Integer sessionid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogRecord() {}

  /**
   * All-args constructor.
   * @param ip The new value for ip
   * @param timestamp The new value for timestamp
   * @param url The new value for url
   * @param referrer The new value for referrer
   * @param useragent The new value for useragent
   * @param sessionid The new value for sessionid
   */
  public LogRecord(java.lang.CharSequence ip, java.lang.Long timestamp, java.lang.CharSequence url, java.lang.CharSequence referrer, java.lang.CharSequence useragent, java.lang.Integer sessionid) {
    this.ip = ip;
    this.timestamp = timestamp;
    this.url = url;
    this.referrer = referrer;
    this.useragent = useragent;
    this.sessionid = sessionid;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return ip;
    case 1: return timestamp;
    case 2: return url;
    case 3: return referrer;
    case 4: return useragent;
    case 5: return sessionid;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: ip = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.Long)value$; break;
    case 2: url = (java.lang.CharSequence)value$; break;
    case 3: referrer = (java.lang.CharSequence)value$; break;
    case 4: useragent = (java.lang.CharSequence)value$; break;
    case 5: sessionid = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'ip' field.
   * @return The value of the 'ip' field.
   */
  public java.lang.CharSequence getIp() {
    return ip;
  }

  /**
   * Sets the value of the 'ip' field.
   * @param value the value to set.
   */
  public void setIp(java.lang.CharSequence value) {
    this.ip = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'url' field.
   * @return The value of the 'url' field.
   */
  public java.lang.CharSequence getUrl() {
    return url;
  }

  /**
   * Sets the value of the 'url' field.
   * @param value the value to set.
   */
  public void setUrl(java.lang.CharSequence value) {
    this.url = value;
  }

  /**
   * Gets the value of the 'referrer' field.
   * @return The value of the 'referrer' field.
   */
  public java.lang.CharSequence getReferrer() {
    return referrer;
  }

  /**
   * Sets the value of the 'referrer' field.
   * @param value the value to set.
   */
  public void setReferrer(java.lang.CharSequence value) {
    this.referrer = value;
  }

  /**
   * Gets the value of the 'useragent' field.
   * @return The value of the 'useragent' field.
   */
  public java.lang.CharSequence getUseragent() {
    return useragent;
  }

  /**
   * Sets the value of the 'useragent' field.
   * @param value the value to set.
   */
  public void setUseragent(java.lang.CharSequence value) {
    this.useragent = value;
  }

  /**
   * Gets the value of the 'sessionid' field.
   * @return The value of the 'sessionid' field.
   */
  public java.lang.Integer getSessionid() {
    return sessionid;
  }

  /**
   * Sets the value of the 'sessionid' field.
   * @param value the value to set.
   */
  public void setSessionid(java.lang.Integer value) {
    this.sessionid = value;
  }

  /**
   * Creates a new LogRecord RecordBuilder.
   * @return A new LogRecord RecordBuilder
   */
  public static com.vkc.avro.LogRecord.Builder newBuilder() {
    return new com.vkc.avro.LogRecord.Builder();
  }

  /**
   * Creates a new LogRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogRecord RecordBuilder
   */
  public static com.vkc.avro.LogRecord.Builder newBuilder(com.vkc.avro.LogRecord.Builder other) {
    return new com.vkc.avro.LogRecord.Builder(other);
  }

  /**
   * Creates a new LogRecord RecordBuilder by copying an existing LogRecord instance.
   * @param other The existing instance to copy.
   * @return A new LogRecord RecordBuilder
   */
  public static com.vkc.avro.LogRecord.Builder newBuilder(com.vkc.avro.LogRecord other) {
    return new com.vkc.avro.LogRecord.Builder(other);
  }

  /**
   * RecordBuilder for LogRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogRecord>
    implements org.apache.avro.data.RecordBuilder<LogRecord> {

    private java.lang.CharSequence ip;
    private long timestamp;
    private java.lang.CharSequence url;
    private java.lang.CharSequence referrer;
    private java.lang.CharSequence useragent;
    private java.lang.Integer sessionid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.vkc.avro.LogRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referrer)) {
        this.referrer = data().deepCopy(fields()[3].schema(), other.referrer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.useragent)) {
        this.useragent = data().deepCopy(fields()[4].schema(), other.useragent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionid)) {
        this.sessionid = data().deepCopy(fields()[5].schema(), other.sessionid);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.vkc.avro.LogRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.ip)) {
        this.ip = data().deepCopy(fields()[0].schema(), other.ip);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.url)) {
        this.url = data().deepCopy(fields()[2].schema(), other.url);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.referrer)) {
        this.referrer = data().deepCopy(fields()[3].schema(), other.referrer);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.useragent)) {
        this.useragent = data().deepCopy(fields()[4].schema(), other.useragent);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sessionid)) {
        this.sessionid = data().deepCopy(fields()[5].schema(), other.sessionid);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'ip' field.
      * @return The value.
      */
    public java.lang.CharSequence getIp() {
      return ip;
    }

    /**
      * Sets the value of the 'ip' field.
      * @param value The value of 'ip'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setIp(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.ip = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ip' field has been set.
      * @return True if the 'ip' field has been set, false otherwise.
      */
    public boolean hasIp() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ip' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearIp() {
      ip = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setTimestamp(long value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearTimestamp() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'url' field.
      * @return The value.
      */
    public java.lang.CharSequence getUrl() {
      return url;
    }

    /**
      * Sets the value of the 'url' field.
      * @param value The value of 'url'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setUrl(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.url = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'url' field has been set.
      * @return True if the 'url' field has been set, false otherwise.
      */
    public boolean hasUrl() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'url' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearUrl() {
      url = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'referrer' field.
      * @return The value.
      */
    public java.lang.CharSequence getReferrer() {
      return referrer;
    }

    /**
      * Sets the value of the 'referrer' field.
      * @param value The value of 'referrer'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setReferrer(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.referrer = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'referrer' field has been set.
      * @return True if the 'referrer' field has been set, false otherwise.
      */
    public boolean hasReferrer() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'referrer' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearReferrer() {
      referrer = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'useragent' field.
      * @return The value.
      */
    public java.lang.CharSequence getUseragent() {
      return useragent;
    }

    /**
      * Sets the value of the 'useragent' field.
      * @param value The value of 'useragent'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setUseragent(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.useragent = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'useragent' field has been set.
      * @return True if the 'useragent' field has been set, false otherwise.
      */
    public boolean hasUseragent() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'useragent' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearUseragent() {
      useragent = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sessionid' field.
      * @return The value.
      */
    public java.lang.Integer getSessionid() {
      return sessionid;
    }

    /**
      * Sets the value of the 'sessionid' field.
      * @param value The value of 'sessionid'.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder setSessionid(java.lang.Integer value) {
      validate(fields()[5], value);
      this.sessionid = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sessionid' field has been set.
      * @return True if the 'sessionid' field has been set, false otherwise.
      */
    public boolean hasSessionid() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sessionid' field.
      * @return This builder.
      */
    public com.vkc.avro.LogRecord.Builder clearSessionid() {
      sessionid = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogRecord build() {
      try {
        LogRecord record = new LogRecord();
        record.ip = fieldSetFlags()[0] ? this.ip : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.Long) defaultValue(fields()[1]);
        record.url = fieldSetFlags()[2] ? this.url : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.referrer = fieldSetFlags()[3] ? this.referrer : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.useragent = fieldSetFlags()[4] ? this.useragent : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.sessionid = fieldSetFlags()[5] ? this.sessionid : (java.lang.Integer) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogRecord>
    READER$ = (org.apache.avro.io.DatumReader<LogRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
